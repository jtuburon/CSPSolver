package com.uniandes.cspsolver

import java.util.ArrayList
import java.util.HashMap

rule "Show Variables"
	salience 1000
	when
		v: Variable()
	then
		System.out.println(v);
end

rule "Show Clues"
	salience 1000
	when
		c: SingleClue()
	then
		System.out.println(c);
end

rule "DirectAssignment"
	salience 500
	when
		c: SingleClue(class==SingleClue, relationship == "=", $v1: dstVar, value matches "\\d+")
		v1: Variable(name==c.dstVar, value != c.value, $g: group)
	then		
		retract(v1);
		System.out.println("Removed:" + v1 + " , due to: "+ c);
end

rule "DirectAssignmentPropagation"
	salience 450
	when
		v: Variable()
		$values : ArrayList( size == 1 )
        	from collect(Variable (name== v.name))
        $var: Variable(group== v.group, value==v.value, name!= v.name)  
	then
		System.out.println("Removed:" + $var + " , due to: " +v);
		retract($var);
end


rule "Process TwoVarsMultiplesAssignmentClues"
	salience 400
	when
		c: TwoVarsRelationshipClue($dv: dstVar, relationship == "=",  $sv: srcVar, $operator: operator)		
		$assignments: HashMap(size==1)
		    from accumulate( dv: Variable(name== $dv) and sv: Variable(name== $sv),
		        init( HashMap h = new HashMap();),
		        action(
		        	if($operator.equals("+")){
			        	if(dv.getValue()== c.getValue() + sv.getValue())
			            	h.put(dv, sv);
		        	}
		        	if($operator.equals("-")){
			        	if(dv.getValue()== c.getValue() - sv.getValue())
			            	h.put(dv, sv);
		        	}
		        	if($operator.equals("*")){
			        	if(dv.getValue()== c.getValue() * sv.getValue())
			            	h.put(dv, sv);
		        	}
		        	if($operator.equals("/")){
			        	if(dv.getValue()== c.getValue() / sv.getValue())
			            	h.put(dv, sv);
		        	}
		        ),
		        result(h)
		    );
	then
		System.out.println("TVRC ==>>");
		Variable dest= (Variable)$assignments.keySet().iterator().next();
		Variable source= (Variable)$assignments.get(dest);
		
		SingleClue sc1= new SingleClue();
		sc1.setDstVar(dest.getName());
		sc1.setRelationship(Clue.EQUIVALENCE_RELATIONSHIP);
		sc1.setValue(dest.getValue());
		insert(sc1);
		
		SingleClue sc2= new SingleClue();
		sc2.setDstVar(source.getName());
		sc2.setRelationship(Clue.EQUIVALENCE_RELATIONSHIP);
		sc2.setValue(source.getValue());
		insert(sc2);
end


rule "ThreeVarsInTwoClues01"
	salience 400
	when
		c1: TwoVarsRelationshipClue($v2: dstVar, relationship == "=",  $v1: srcVar, $op01: operator)
		c2: TwoVarsRelationshipClue($v3: dstVar , relationship == "=",  $v2== srcVar, $op02: operator)
		$assignments: HashMap(size==1)
		    from accumulate(v1: Variable(name == $v1) and v2: Variable(name==$v2) and v3: Variable(name==$v3),
		        init( HashMap h = new HashMap();),
		        action(
		        	String key = ""+v1.getValue()+"::"+v2.getValue()+"::"+v3.getValue();
			        boolean sw=false;
			        sw=  ($op01.equals("+") && $op02.equals("+") && v2.getValue()== v1.getValue() + c1.getValue() && v3.getValue()== v2.getValue() + c2.getValue() );
			        sw|= ($op01.equals("+") && $op02.equals("-") && v2.getValue()== v1.getValue() + c1.getValue() && v3.getValue()== v2.getValue() - c2.getValue());
			        sw|= ($op01.equals("+") && $op02.equals("*") && v2.getValue()== v1.getValue() + c1.getValue() && v3.getValue()== v2.getValue() * c2.getValue());
			        sw|= ($op01.equals("+") && $op02.equals("/") && v2.getValue()== v1.getValue() + c1.getValue() && v3.getValue()== v2.getValue() / c2.getValue());
			        
			        sw|= ($op01.equals("-") && $op02.equals("+") && v2.getValue()== v1.getValue() - c1.getValue() && v3.getValue()== v2.getValue() + c2.getValue());
			        sw|= ($op01.equals("-") && $op02.equals("-") && v2.getValue()== v1.getValue() - c1.getValue() && v3.getValue()== v2.getValue() - c2.getValue());
			        sw|= ($op01.equals("-") && $op02.equals("*") && v2.getValue()== v1.getValue() - c1.getValue() && v3.getValue()== v2.getValue() * c2.getValue());
			        sw|= ($op01.equals("-") && $op02.equals("/") && v2.getValue()== v1.getValue() - c1.getValue() && v3.getValue()== v2.getValue() / c2.getValue());
			        
			        sw|= ($op01.equals("*") && $op02.equals("+") && v2.getValue()== v1.getValue() * c1.getValue() && v3.getValue()== v2.getValue() + c2.getValue());
			        sw|= ($op01.equals("*") && $op02.equals("-") && v2.getValue()== v1.getValue() * c1.getValue() && v3.getValue()== v2.getValue() - c2.getValue());
			        sw|= ($op01.equals("*") && $op02.equals("*") && v2.getValue()== v1.getValue() * c1.getValue() && v3.getValue()== v2.getValue() * c2.getValue());
			        sw|= ($op01.equals("*") && $op02.equals("/") && v2.getValue()== v1.getValue() * c1.getValue() && v3.getValue()== v2.getValue() / c2.getValue());
			        
			        sw|= ($op01.equals("/") && $op02.equals("+") && v2.getValue()== v1.getValue() / c1.getValue() && v3.getValue()== v2.getValue() + c2.getValue());
			        sw|= ($op01.equals("/") && $op02.equals("-") && v2.getValue()== v1.getValue() / c1.getValue() && v3.getValue()== v2.getValue() - c2.getValue());
			        sw|= ($op01.equals("/") && $op02.equals("*") && v2.getValue()== v1.getValue() / c1.getValue() && v3.getValue()== v2.getValue() * c2.getValue());
			        sw|= ($op01.equals("/") && $op02.equals("/") && v2.getValue()== v1.getValue() / c1.getValue() && v3.getValue()== v2.getValue() / c2.getValue());
			        if(h.get(key)==null && sw){
			        	ArrayList<Variable> vars =new ArrayList();
		        		vars.add(v1);
		        		vars.add(v2);
		        		vars.add(v3);
		        		h.put(key, vars);
			        }
		        ),
		        result(h)
		    );
	then
		System.out.println("3Vars2Clues01 ==>>");
		System.out.println($assignments);
		String key= (String)$assignments.keySet().iterator().next();
		ArrayList<Variable> vars= (ArrayList<Variable>)$assignments.get(key);
		for(int i=0; i<vars.size(); i++){
			Variable v= vars.get(i);
			SingleClue sc= new SingleClue();
			sc.setDstVar(v.getName());
			sc.setRelationship(Clue.EQUIVALENCE_RELATIONSHIP);
			sc.setValue(v.getValue());
			insert(sc);
		}
end


rule "ThreeVarsInTwoClues02"
	salience 400
	when
		c1: TwoVarsRelationshipClue($v2: dstVar, relationship == "=",  $v1: srcVar, $op01: operator)
		c2: TwoVarsRelationshipClue(this!= c1, $v3: dstVar , relationship == "=",  $v1== srcVar, $op02: operator)
		$assignments: HashMap(size>=1)
		    from accumulate(v1: Variable(name == $v1) and v2: Variable(name==$v2) and v3: Variable(name==$v3),
		        init( HashMap h = new HashMap();),
		        action(
		        	String key = ""+v1.getValue()+"::"+v2.getValue()+"::"+v3.getValue();
			        boolean sw=false;
			        sw=  ($op01.equals("+") && $op02.equals("+") && v2.getValue()== v1.getValue() + c1.getValue() && v3.getValue()== v1.getValue() + c2.getValue());
			        sw|= ($op01.equals("+") && $op02.equals("-") && v2.getValue()== v1.getValue() + c1.getValue() && v3.getValue()== v1.getValue() - c2.getValue());
			        sw|= ($op01.equals("+") && $op02.equals("*") && v2.getValue()== v1.getValue() + c1.getValue() && v3.getValue()== v1.getValue() * c2.getValue());
			        sw|= ($op01.equals("+") && $op02.equals("/") && v2.getValue()== v1.getValue() + c1.getValue() && v3.getValue()== v1.getValue() / c2.getValue());
			        
			        sw|= ($op01.equals("-") && $op02.equals("+") && v2.getValue()== v1.getValue() - c1.getValue() && v3.getValue()== v1.getValue() + c2.getValue());
			        sw|= ($op01.equals("-") && $op02.equals("-") && v2.getValue()== v1.getValue() - c1.getValue() && v3.getValue()== v1.getValue() - c2.getValue());
			        sw|= ($op01.equals("-") && $op02.equals("*") && v2.getValue()== v1.getValue() - c1.getValue() && v3.getValue()== v1.getValue() * c2.getValue());
			        sw|= ($op01.equals("-") && $op02.equals("/") && v2.getValue()== v1.getValue() - c1.getValue() && v3.getValue()== v1.getValue() / c2.getValue());
			        
			        sw|= ($op01.equals("*") && $op02.equals("+") && v2.getValue()== v1.getValue() * c1.getValue() && v3.getValue()== v1.getValue() + c2.getValue());
			        sw|= ($op01.equals("*") && $op02.equals("-") && v2.getValue()== v1.getValue() * c1.getValue() && v3.getValue()== v1.getValue() - c2.getValue());
			        sw|= ($op01.equals("*") && $op02.equals("*") && v2.getValue()== v1.getValue() * c1.getValue() && v3.getValue()== v1.getValue() * c2.getValue());
			        sw|= ($op01.equals("*") && $op02.equals("/") && v2.getValue()== v1.getValue() * c1.getValue() && v3.getValue()== v1.getValue() / c2.getValue());
			        
			        sw|= ($op01.equals("/") && $op02.equals("+") && v2.getValue()== v1.getValue() / c1.getValue() && v3.getValue()== v1.getValue() + c2.getValue());
			        sw|= ($op01.equals("/") && $op02.equals("-") && v2.getValue()== v1.getValue() / c1.getValue() && v3.getValue()== v1.getValue() - c2.getValue());
			        sw|= ($op01.equals("/") && $op02.equals("*") && v2.getValue()== v1.getValue() / c1.getValue() && v3.getValue()== v1.getValue() * c2.getValue());
			        sw|= ($op01.equals("/") && $op02.equals("/") && v2.getValue()== v1.getValue() / c1.getValue() && v3.getValue()== v1.getValue() / c2.getValue());
			        if(h.get(key)==null && sw){
			        	ArrayList<Variable> vars =new ArrayList();
		        		vars.add(v1);
		        		vars.add(v2);
		        		vars.add(v3);
		        		h.put(key, vars);
			        }
		        ),
		        result(h)
		    );
	then
		System.out.println("3Vars2Clues02 ==>>");
		System.out.println(c1);
		System.out.println(c2);
		System.out.println($assignments);
		String key= (String)$assignments.keySet().iterator().next();
		ArrayList<Variable> vars= (ArrayList<Variable>)$assignments.get(key);
		for(int i=0; i<vars.size(); i++){
			Variable v= vars.get(i);
			SingleClue sc= new SingleClue();
			sc.setDstVar(v.getName());
			sc.setRelationship(Clue.EQUIVALENCE_RELATIONSHIP);
			sc.setValue(v.getValue());
			insert(sc);
		}
end


rule "ThreeVarsInTwoClues03"
	salience 400
	when
		c1: TwoVarsRelationshipClue($v2: dstVar, relationship == "=",  $v1: srcVar, $op01: operator)
		c2: TwoVarsRelationshipClue(this!= c1, $v2== dstVar, relationship == "=", $v3: srcVar , $op02: operator)
		$assignments: HashMap(size>=1)
		    from accumulate(v1: Variable(name == $v1) and v2: Variable(name==$v2) and v3: Variable(name==$v3),
		        init( HashMap h = new HashMap();),
		        action(
		        	String key = ""+v1.getValue()+"::"+v2.getValue()+"::"+v3.getValue();
			        boolean sw=false;
			        sw=  ($op01.equals("+") && $op02.equals("+") && v2.getValue()== v1.getValue() + c1.getValue() && v2.getValue()== v3.getValue() + c2.getValue());
			        sw|= ($op01.equals("+") && $op02.equals("-") && v2.getValue()== v1.getValue() + c1.getValue() && v2.getValue()== v3.getValue() - c2.getValue());
			        sw|= ($op01.equals("+") && $op02.equals("*") && v2.getValue()== v1.getValue() + c1.getValue() && v2.getValue()== v3.getValue() * c2.getValue());
			        sw|= ($op01.equals("+") && $op02.equals("/") && v2.getValue()== v1.getValue() + c1.getValue() && v2.getValue()== v3.getValue() / c2.getValue());
			        
			        sw|= ($op01.equals("-") && $op02.equals("+") && v2.getValue()== v1.getValue() - c1.getValue() && v2.getValue()== v3.getValue() + c2.getValue());
			        sw|= ($op01.equals("-") && $op02.equals("-") && v2.getValue()== v1.getValue() - c1.getValue() && v2.getValue()== v3.getValue() - c2.getValue());
			        sw|= ($op01.equals("-") && $op02.equals("*") && v2.getValue()== v1.getValue() - c1.getValue() && v2.getValue()== v3.getValue() * c2.getValue());
			        sw|= ($op01.equals("-") && $op02.equals("/") && v2.getValue()== v1.getValue() - c1.getValue() && v2.getValue()== v3.getValue() / c2.getValue());
			        
			        sw|= ($op01.equals("*") && $op02.equals("+") && v2.getValue()== v1.getValue() * c1.getValue() && v2.getValue()== v3.getValue() + c2.getValue());
			        sw|= ($op01.equals("*") && $op02.equals("-") && v2.getValue()== v1.getValue() * c1.getValue() && v2.getValue()== v3.getValue() - c2.getValue());
			        sw|= ($op01.equals("*") && $op02.equals("*") && v2.getValue()== v1.getValue() * c1.getValue() && v2.getValue()== v3.getValue() * c2.getValue());
			        sw|= ($op01.equals("*") && $op02.equals("/") && v2.getValue()== v1.getValue() * c1.getValue() && v2.getValue()== v3.getValue() / c2.getValue());
			        
			        sw|= ($op01.equals("/") && $op02.equals("+") && v2.getValue()== v1.getValue() / c1.getValue() && v2.getValue()== v3.getValue() + c2.getValue());
			        sw|= ($op01.equals("/") && $op02.equals("-") && v2.getValue()== v1.getValue() / c1.getValue() && v2.getValue()== v3.getValue() - c2.getValue());
			        sw|= ($op01.equals("/") && $op02.equals("*") && v2.getValue()== v1.getValue() / c1.getValue() && v2.getValue()== v3.getValue() * c2.getValue());
			        sw|= ($op01.equals("/") && $op02.equals("/") && v2.getValue()== v1.getValue() / c1.getValue() && v2.getValue()== v3.getValue() / c2.getValue());
			        if(h.get(key)==null && sw){
			        	ArrayList<Variable> vars =new ArrayList();
		        		vars.add(v1);
		        		vars.add(v2);
		        		vars.add(v3);
		        		h.put(key, vars);
			        }
		        ),
		        result(h)
		    );
	then
		System.out.println("3Vars2Clues03 ==>>");
		System.out.println(c1);
		System.out.println(c2);
		System.out.println($assignments);
		String key= (String)$assignments.keySet().iterator().next();
		ArrayList<Variable> vars= (ArrayList<Variable>)$assignments.get(key);
		for(int i=0; i<vars.size(); i++){
			Variable v= vars.get(i);
			SingleClue sc= new SingleClue();
			sc.setDstVar(v.getName());
			sc.setRelationship(Clue.EQUIVALENCE_RELATIONSHIP);
			sc.setValue(v.getValue());
			insert(sc);
		}
end



rule "Show Solution"
	salience 0
	when
		array: ArrayList(size == 8)
        	from collect(Variable())
	then
		System.out.println("Solution Found");
		System.out.println(array);
		javax.swing.JOptionPane.showMessageDialog(null, "Solution: " + array, "Solution Found", javax.swing.JOptionPane.INFORMATION_MESSAGE);
end
