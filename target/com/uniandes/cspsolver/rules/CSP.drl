package com.uniandes.cspsolver

import java.util.ArrayList
import java.util.HashMap
import java.util.List

rule "Show Variables"
	salience 1000
	when
		v: Variable()
	then
		System.out.println(v);
end

rule "Show Clues"
	salience 1000
	when
		c: Clue()
	then
		System.out.println(c);
end

rule "DirectAssignment"
	salience 600
	when
		c: SingleClue(class==SingleClue, relationship == "=", $v1: dstVar, value matches "\\d+")
		v1: Variable(name==c.dstVar, value != c.value, $g: group)
	then		
		retract(v1);
		System.out.println("Removed:" + v1 + " , due to: "+ c);
end

rule "DirectAssignmentPropagation"
	salience 650
	when
		v: Variable()
		$values : ArrayList( size == 1 )
        	from collect(Variable (name== v.name))
        $var: Variable(group== v.group, value==v.value, name!= v.name)  
	then
		System.out.println("Removed:" + $var + " , due to: " +v);
		retract($var);
end

rule "SingleDomainRestriction"
	salience 500
	when
		c: SingleClue(class==SingleClue, relationship != InputPattern.EQUIVALENCE_RELATIONSHIP, $v1: dstVar, value matches "\\d+")
		$values : ArrayList(size>0)
		    from accumulate(v: Variable(name== $v1),
		        init( ArrayList list = new ArrayList();),
		        action(
		        	if(c.getRelationship().equals(">") && !(v.getValue() > c.getValue())){
		        		list.add(v);
		        	}
		        	if(c.getRelationship().equals(">=") && !(v.getValue() >= c.getValue())){
		        		list.add(v);
		        	}
		        	if(c.getRelationship().equals("<") && !(v.getValue() < c.getValue())){
		        		list.add(v);
		        	}
		        	if(c.getRelationship().equals("<=") && !(v.getValue() <= c.getValue())){
		        		list.add(v);
		        	}
		        ),
		        result(list)
		    );
	then	
		System.out.println("SingleDomainRestriction::");
		for(int i=0; i< $values.size();i++){
			Variable v = (Variable) $values.get(i);
			System.out.println(v+ " removed due to: " +  c);
			retract(v);
		}
end

rule "InValuesClueDomainRestriction"
	salience 500
	when
		c: InValuesClue()
		v: Variable(name==c.dstVar, c.getValues() not contains value)
	then	
		System.out.println("InValuesClueDomainRestriction::");
		System.out.println(v +" removed due to " + c);
		retract(v);
end

rule "Process TwoVarsMultiplesAssignmentClues"
	salience 400
	when
		c: TwoVarsRelationshipClue($dv: dstVar, relationship == "=",  $sv: srcVar, $operator: operator)		
		$assignments: HashMap(size==1)
		    from accumulate( dv: Variable(name== $dv) and sv: Variable(name== $sv),
		        init( HashMap h = new HashMap();),
		        action(
		        	if($operator.equals("+")){
			        	if(dv.getValue()== c.getValue() + sv.getValue())
			            	h.put(dv, sv);
		        	}
		        	if($operator.equals("-")){
			        	if(dv.getValue()== c.getValue() - sv.getValue())
			            	h.put(dv, sv);
		        	}
		        	if($operator.equals("*")){
			        	if(dv.getValue()== c.getValue() * sv.getValue())
			            	h.put(dv, sv);
		        	}
		        	if($operator.equals("/")){
			        	if(dv.getValue()== c.getValue() / sv.getValue())
			            	h.put(dv, sv);
		        	}
		        ),
		        result(h)
		    );
	then
		System.out.println("TVRC ==>>");
		Variable dest= (Variable)$assignments.keySet().iterator().next();
		Variable source= (Variable)$assignments.get(dest);
		
		SingleClue sc1= new SingleClue();
		sc1.setDstVar(dest.getName());
		sc1.setRelationship(InputPattern.EQUIVALENCE_RELATIONSHIP);
		sc1.setValue(dest.getValue());
		insert(sc1);
		
		SingleClue sc2= new SingleClue();
		sc2.setDstVar(source.getName());
		sc2.setRelationship(InputPattern.EQUIVALENCE_RELATIONSHIP);
		sc2.setValue(source.getValue());
		insert(sc2);
end

rule "ThreeVarsInTwoClues01"
	salience 400
	when
		c1: TwoVarsRelationshipClue($v2: dstVar, relationship == "=",  $v1: srcVar, $op01: operator)
		c2: TwoVarsRelationshipClue($v3: dstVar , relationship == "=",  $v2== srcVar, $op02: operator)
		$assignments: HashMap(size>=1)
		    from accumulate(v1: Variable(name == $v1) and v2: Variable(name==$v2) and v3: Variable(name==$v3),
		        init( HashMap h = new HashMap();),
		        action(
		        	String key = ""+v1.getValue()+"::"+v2.getValue()+"::"+v3.getValue();
			        boolean sw=false;
			        sw=  ($op01.equals("+") && $op02.equals("+") && v2.getValue()== v1.getValue() + c1.getValue() && v3.getValue()== v2.getValue() + c2.getValue() );
			        sw|= ($op01.equals("+") && $op02.equals("-") && v2.getValue()== v1.getValue() + c1.getValue() && v3.getValue()== v2.getValue() - c2.getValue());
			        sw|= ($op01.equals("+") && $op02.equals("*") && v2.getValue()== v1.getValue() + c1.getValue() && v3.getValue()== v2.getValue() * c2.getValue());
			        sw|= ($op01.equals("+") && $op02.equals("/") && v2.getValue()== v1.getValue() + c1.getValue() && v3.getValue()== v2.getValue() / c2.getValue());
			        
			        sw|= ($op01.equals("-") && $op02.equals("+") && v2.getValue()== v1.getValue() - c1.getValue() && v3.getValue()== v2.getValue() + c2.getValue());
			        sw|= ($op01.equals("-") && $op02.equals("-") && v2.getValue()== v1.getValue() - c1.getValue() && v3.getValue()== v2.getValue() - c2.getValue());
			        sw|= ($op01.equals("-") && $op02.equals("*") && v2.getValue()== v1.getValue() - c1.getValue() && v3.getValue()== v2.getValue() * c2.getValue());
			        sw|= ($op01.equals("-") && $op02.equals("/") && v2.getValue()== v1.getValue() - c1.getValue() && v3.getValue()== v2.getValue() / c2.getValue());
			        
			        sw|= ($op01.equals("*") && $op02.equals("+") && v2.getValue()== v1.getValue() * c1.getValue() && v3.getValue()== v2.getValue() + c2.getValue());
			        sw|= ($op01.equals("*") && $op02.equals("-") && v2.getValue()== v1.getValue() * c1.getValue() && v3.getValue()== v2.getValue() - c2.getValue());
			        sw|= ($op01.equals("*") && $op02.equals("*") && v2.getValue()== v1.getValue() * c1.getValue() && v3.getValue()== v2.getValue() * c2.getValue());
			        sw|= ($op01.equals("*") && $op02.equals("/") && v2.getValue()== v1.getValue() * c1.getValue() && v3.getValue()== v2.getValue() / c2.getValue());
			        
			        sw|= ($op01.equals("/") && $op02.equals("+") && v2.getValue()== v1.getValue() / c1.getValue() && v3.getValue()== v2.getValue() + c2.getValue());
			        sw|= ($op01.equals("/") && $op02.equals("-") && v2.getValue()== v1.getValue() / c1.getValue() && v3.getValue()== v2.getValue() - c2.getValue());
			        sw|= ($op01.equals("/") && $op02.equals("*") && v2.getValue()== v1.getValue() / c1.getValue() && v3.getValue()== v2.getValue() * c2.getValue());
			        sw|= ($op01.equals("/") && $op02.equals("/") && v2.getValue()== v1.getValue() / c1.getValue() && v3.getValue()== v2.getValue() / c2.getValue());
			        if(h.get(key)==null && sw){
			        	ArrayList<Variable> vars =new ArrayList();
		        		vars.add(v1);
		        		vars.add(v2);
		        		vars.add(v3);
		        		h.put(key, vars);
			        }
		        ),
		        result(h)
		    );
	then
		System.out.println("3Vars2Clues01 ==>>");
		System.out.println(c1);
		System.out.println(c2);
		ArrayList<ArrayList<Variable>> combinations= new ArrayList($assignments.values());
		System.out.println(combinations);
		if(combinations.size()==1){
			ArrayList<Variable> vars= (ArrayList<Variable>)combinations.get(0);
			for(int i=0; i<vars.size(); i++){
				Variable v= vars.get(i);
				SingleClue sc= new SingleClue();
				sc.setDstVar(v.getName());
				sc.setRelationship(InputPattern.EQUIVALENCE_RELATIONSHIP);
				sc.setValue(v.getValue());
				insert(sc);
			}
		}else{
			InValuesClue ivc1= new InValuesClue();
			ivc1.setDstVar($v1);
			InValuesClue ivc2= new InValuesClue();
			ivc2.setDstVar($v2);
			InValuesClue ivc3= new InValuesClue();
			ivc3.setDstVar($v3);
			
			for(int i=0; i<combinations.size() ;i++){
				ArrayList<Variable> combination = combinations.get(i);
				for(int j=0; j< combination.size();j++){
					Variable v = combination.get(j);
					if(ivc1.getDstVar().equals(v.getName())){
						ivc1.addValue(Integer.valueOf(v.getValue()));
					}else if(ivc2.getDstVar().equals(v.getName())){
						ivc2.addValue(Integer.valueOf(v.getValue()));
					}else if(ivc3.getDstVar().equals(v.getName())){
						ivc3.addValue(Integer.valueOf(v.getValue()));
					}
				}
			}
			System.out.println(ivc1);
			System.out.println(ivc2);
			System.out.println(ivc3);
			
			insert(ivc1);
			insert(ivc2);
			insert(ivc3);	
		}
		
end


rule "ThreeVarsInTwoClues02"
	salience 400
	when
		c1: TwoVarsRelationshipClue($v2: dstVar, relationship == "=",  $v1: srcVar, $op01: operator)
		c2: TwoVarsRelationshipClue(this!= c1, $v3: dstVar , relationship == "=",  $v1== srcVar, $op02: operator)
		$assignments: HashMap(size>=1)
		    from accumulate(v1: Variable(name == $v1) and v2: Variable(name==$v2) and v3: Variable(name==$v3),
		        init( HashMap h = new HashMap();),
		        action(
		        	String key = ""+v1.getValue()+"::"+v2.getValue()+"::"+v3.getValue();
			        boolean sw=false;
			        sw=  ($op01.equals("+") && $op02.equals("+") && v2.getValue()== v1.getValue() + c1.getValue() && v3.getValue()== v1.getValue() + c2.getValue());
			        sw|= ($op01.equals("+") && $op02.equals("-") && v2.getValue()== v1.getValue() + c1.getValue() && v3.getValue()== v1.getValue() - c2.getValue());
			        sw|= ($op01.equals("+") && $op02.equals("*") && v2.getValue()== v1.getValue() + c1.getValue() && v3.getValue()== v1.getValue() * c2.getValue());
			        sw|= ($op01.equals("+") && $op02.equals("/") && v2.getValue()== v1.getValue() + c1.getValue() && v3.getValue()== v1.getValue() / c2.getValue());
			        
			        sw|= ($op01.equals("-") && $op02.equals("+") && v2.getValue()== v1.getValue() - c1.getValue() && v3.getValue()== v1.getValue() + c2.getValue());
			        sw|= ($op01.equals("-") && $op02.equals("-") && v2.getValue()== v1.getValue() - c1.getValue() && v3.getValue()== v1.getValue() - c2.getValue());
			        sw|= ($op01.equals("-") && $op02.equals("*") && v2.getValue()== v1.getValue() - c1.getValue() && v3.getValue()== v1.getValue() * c2.getValue());
			        sw|= ($op01.equals("-") && $op02.equals("/") && v2.getValue()== v1.getValue() - c1.getValue() && v3.getValue()== v1.getValue() / c2.getValue());
			        
			        sw|= ($op01.equals("*") && $op02.equals("+") && v2.getValue()== v1.getValue() * c1.getValue() && v3.getValue()== v1.getValue() + c2.getValue());
			        sw|= ($op01.equals("*") && $op02.equals("-") && v2.getValue()== v1.getValue() * c1.getValue() && v3.getValue()== v1.getValue() - c2.getValue());
			        sw|= ($op01.equals("*") && $op02.equals("*") && v2.getValue()== v1.getValue() * c1.getValue() && v3.getValue()== v1.getValue() * c2.getValue());
			        sw|= ($op01.equals("*") && $op02.equals("/") && v2.getValue()== v1.getValue() * c1.getValue() && v3.getValue()== v1.getValue() / c2.getValue());
			        
			        sw|= ($op01.equals("/") && $op02.equals("+") && v2.getValue()== v1.getValue() / c1.getValue() && v3.getValue()== v1.getValue() + c2.getValue());
			        sw|= ($op01.equals("/") && $op02.equals("-") && v2.getValue()== v1.getValue() / c1.getValue() && v3.getValue()== v1.getValue() - c2.getValue());
			        sw|= ($op01.equals("/") && $op02.equals("*") && v2.getValue()== v1.getValue() / c1.getValue() && v3.getValue()== v1.getValue() * c2.getValue());
			        sw|= ($op01.equals("/") && $op02.equals("/") && v2.getValue()== v1.getValue() / c1.getValue() && v3.getValue()== v1.getValue() / c2.getValue());
			        if(h.get(key)==null && sw){
			        	ArrayList<Variable> vars =new ArrayList();
		        		vars.add(v1);
		        		vars.add(v2);
		        		vars.add(v3);
		        		h.put(key, vars);
			        }
		        ),
		        result(h)
		    );
	then
		System.out.println("3Vars2Clues02 ==>>");
		System.out.println(c1);
		System.out.println(c2);
		ArrayList<ArrayList<Variable>> combinations= new ArrayList($assignments.values());
		System.out.println(combinations);
		if(combinations.size()==1){
			ArrayList<Variable> vars= (ArrayList<Variable>)combinations.get(0);
			for(int i=0; i<vars.size(); i++){
				Variable v= vars.get(i);
				SingleClue sc= new SingleClue();
				sc.setDstVar(v.getName());
				sc.setRelationship(InputPattern.EQUIVALENCE_RELATIONSHIP);
				sc.setValue(v.getValue());
				insert(sc);
			}
		}else{
			InValuesClue ivc1= new InValuesClue();
			ivc1.setDstVar($v1);
			InValuesClue ivc2= new InValuesClue();
			ivc2.setDstVar($v2);
			InValuesClue ivc3= new InValuesClue();
			ivc3.setDstVar($v3);
			
			for(int i=0; i<combinations.size() ;i++){
				ArrayList<Variable> combination = combinations.get(i);
				for(int j=0; j< combination.size();j++){
					Variable v = combination.get(j);
					if(ivc1.getDstVar().equals(v.getName())){
						ivc1.addValue(Integer.valueOf(v.getValue()));
					}else if(ivc2.getDstVar().equals(v.getName())){
						ivc2.addValue(Integer.valueOf(v.getValue()));
					}else if(ivc3.getDstVar().equals(v.getName())){
						ivc3.addValue(Integer.valueOf(v.getValue()));
					}
				}
			}
			System.out.println(ivc1);
			System.out.println(ivc2);
			System.out.println(ivc3);
			
			insert(ivc1);
			insert(ivc2);
			insert(ivc3);	
		}
		
end


rule "ThreeVarsInTwoClues03"
	salience 400
	when
		c1: TwoVarsRelationshipClue($v2: dstVar, relationship == "=",  $v1: srcVar, $op01: operator)
		c2: TwoVarsRelationshipClue(this!= c1, $v2== dstVar, relationship == "=", $v3: srcVar , $op02: operator)
		$assignments: HashMap(size>=1)
		    from accumulate(v1: Variable(name == $v1) and v2: Variable(name==$v2) and v3: Variable(name==$v3),
		        init( HashMap h = new HashMap();),
		        action(
		        	String key = ""+v1.getValue()+"::"+v2.getValue()+"::"+v3.getValue();
			        boolean sw=false;
			        sw=  ($op01.equals("+") && $op02.equals("+") && v2.getValue()== v1.getValue() + c1.getValue() && v2.getValue()== v3.getValue() + c2.getValue());
			        sw|= ($op01.equals("+") && $op02.equals("-") && v2.getValue()== v1.getValue() + c1.getValue() && v2.getValue()== v3.getValue() - c2.getValue());
			        sw|= ($op01.equals("+") && $op02.equals("*") && v2.getValue()== v1.getValue() + c1.getValue() && v2.getValue()== v3.getValue() * c2.getValue());
			        sw|= ($op01.equals("+") && $op02.equals("/") && v2.getValue()== v1.getValue() + c1.getValue() && v2.getValue()== v3.getValue() / c2.getValue());
			        
			        sw|= ($op01.equals("-") && $op02.equals("+") && v2.getValue()== v1.getValue() - c1.getValue() && v2.getValue()== v3.getValue() + c2.getValue());
			        sw|= ($op01.equals("-") && $op02.equals("-") && v2.getValue()== v1.getValue() - c1.getValue() && v2.getValue()== v3.getValue() - c2.getValue());
			        sw|= ($op01.equals("-") && $op02.equals("*") && v2.getValue()== v1.getValue() - c1.getValue() && v2.getValue()== v3.getValue() * c2.getValue());
			        sw|= ($op01.equals("-") && $op02.equals("/") && v2.getValue()== v1.getValue() - c1.getValue() && v2.getValue()== v3.getValue() / c2.getValue());
			        
			        sw|= ($op01.equals("*") && $op02.equals("+") && v2.getValue()== v1.getValue() * c1.getValue() && v2.getValue()== v3.getValue() + c2.getValue());
			        sw|= ($op01.equals("*") && $op02.equals("-") && v2.getValue()== v1.getValue() * c1.getValue() && v2.getValue()== v3.getValue() - c2.getValue());
			        sw|= ($op01.equals("*") && $op02.equals("*") && v2.getValue()== v1.getValue() * c1.getValue() && v2.getValue()== v3.getValue() * c2.getValue());
			        sw|= ($op01.equals("*") && $op02.equals("/") && v2.getValue()== v1.getValue() * c1.getValue() && v2.getValue()== v3.getValue() / c2.getValue());
			        
			        sw|= ($op01.equals("/") && $op02.equals("+") && v2.getValue()== v1.getValue() / c1.getValue() && v2.getValue()== v3.getValue() + c2.getValue());
			        sw|= ($op01.equals("/") && $op02.equals("-") && v2.getValue()== v1.getValue() / c1.getValue() && v2.getValue()== v3.getValue() - c2.getValue());
			        sw|= ($op01.equals("/") && $op02.equals("*") && v2.getValue()== v1.getValue() / c1.getValue() && v2.getValue()== v3.getValue() * c2.getValue());
			        sw|= ($op01.equals("/") && $op02.equals("/") && v2.getValue()== v1.getValue() / c1.getValue() && v2.getValue()== v3.getValue() / c2.getValue());
			        if(h.get(key)==null && sw){
			        	ArrayList<Variable> vars =new ArrayList();
		        		vars.add(v1);
		        		vars.add(v2);
		        		vars.add(v3);
		        		h.put(key, vars);
			        }
		        ),
		        result(h)
		    );
	then
		System.out.println("3Vars2Clues03 ==>>");
		System.out.println(c1);
		System.out.println(c2);
		ArrayList<ArrayList<Variable>> combinations= new ArrayList($assignments.values());
		System.out.println(combinations);
		if(combinations.size()==1){
			ArrayList<Variable> vars= (ArrayList<Variable>)combinations.get(0);
			for(int i=0; i<vars.size(); i++){
				Variable v= vars.get(i);
				SingleClue sc= new SingleClue();
				sc.setDstVar(v.getName());
				sc.setRelationship(InputPattern.EQUIVALENCE_RELATIONSHIP);
				sc.setValue(v.getValue());
				insert(sc);
			}
		}else{
			InValuesClue ivc1= new InValuesClue();
			ivc1.setDstVar($v1);
			InValuesClue ivc2= new InValuesClue();
			ivc2.setDstVar($v2);
			InValuesClue ivc3= new InValuesClue();
			ivc3.setDstVar($v3);
			
			for(int i=0; i<combinations.size() ;i++){
				ArrayList<Variable> combination = combinations.get(i);
				for(int j=0; j< combination.size();j++){
					Variable v = combination.get(j);
					if(ivc1.getDstVar().equals(v.getName())){
						ivc1.addValue(Integer.valueOf(v.getValue()));
					}else if(ivc2.getDstVar().equals(v.getName())){
						ivc2.addValue(Integer.valueOf(v.getValue()));
					}else if(ivc3.getDstVar().equals(v.getName())){
						ivc3.addValue(Integer.valueOf(v.getValue()));
					}
				}
			}
			System.out.println(ivc1);
			System.out.println(ivc2);
			System.out.println(ivc3);
			
			insert(ivc1);
			insert(ivc2);
			insert(ivc3);	
		}
end



rule "Show Solution"
	salience 1000
	when
		array: ArrayList(size == 8)
        	from collect(Variable())
	then
		System.out.println("Solution Found");
		System.out.println(array);
		javax.swing.JOptionPane.showMessageDialog(null, "Solution: " + array, "Solution Found", javax.swing.JOptionPane.INFORMATION_MESSAGE);
end
