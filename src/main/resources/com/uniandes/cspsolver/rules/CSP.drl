package com.uniandes.cspsolver

import java.util.ArrayList
import java.util.HashMap
import java.util.List
import java.util.Iterator

rule "Show Variables"
	salience 1000
	when
		Solution(found==false)
		v: Variable()
	then
		System.out.println(v);
end

rule "Show Clues"
	salience 1000
	when
		Solution(found==false)
		c: Clue()
	then
		System.out.println(c);
end

rule "Found Solution"
	salience 1000
	when
		s: Solution(found==false)
		array: ArrayList(size == 8)
        	from collect(Variable())
	then
		s.setFound(true);
		s.setVariables(array);
		Instruction i= new Instruction();
		i.setRuleName(Clue.FOUND_SOLUTION_RULE_NAME);
		i.setRuleDescription(Clue.FOUND_SOLUTION_RULE_DESC);
		i.addAction("Solution Found: "+ array);
		s.addInstruction(i);
		
		System.out.println("Solution Found");
		System.out.println(s.toString());
		javax.swing.JOptionPane.showMessageDialog(null, "Solution: " + array, "Solution Found", javax.swing.JOptionPane.INFORMATION_MESSAGE);
		update(s);
end

rule "Show Partial-Solution"
	salience 0
	when
		s: Solution(found==false)
		array: ArrayList(size > 8)
        	from collect(Variable())
	then
		s.setVariables(array);
		System.out.println("Partial Solution");
		System.out.println(s.toString());
end

rule "DirectAssignmentClue"
	salience 600
	when
		s: Solution(found==false)
		c: SingleClue(class==SingleClue, relationship == "=", $v1: dstVar, value matches "\\d+")
		v1: Variable(name==c.dstVar, value != c.value, $g: group)
	then		
		retract(v1);
		Instruction i= new Instruction();
		i.setRuleName(Clue.DIRECT_ASSIGNMENT_CLUE_RULE_NAME);
		i.setRuleDescription(Clue.DIRECT_ASSIGNMENT_CLUE_RULE_DESC);
		i.addAction("Removed:" + v1 + " , due to: "+ c);
		s.addInstruction(i);
end

rule "DirectAssignmentPropagation"
	salience 650
	when
		s: Solution(found==false)
		v: Variable()
		$values : ArrayList( size == 1 )
        	from collect(Variable (name== v.name))
        $var: Variable(group== v.group, value==v.value, name!= v.name)  
	then
		retract($var);
		Instruction i= new Instruction();
		i.setRuleName(Clue.DIRECT_ASSIGNMENT_PROPAGATION_RULE_NAME);
		i.setRuleDescription(Clue.DIRECT_ASSIGNMENT_PROPAGATION_RULE_DESC);
		i.addAction("Removed:" + $var + " , due to: " +v);
		s.addInstruction(i);
end

rule "SingleDomainReduction"
	salience 500
	when
		s: Solution(found==false)
		c: SingleClue(class==SingleClue, relationship != InputPattern.EQUIVALENCE_RELATIONSHIP, $v1: dstVar, value matches "\\d+")
		$values : ArrayList(size>0)
		    from accumulate(v: Variable(name== $v1),
		        init( ArrayList list = new ArrayList();),
		        action(
		        	if(c.getRelationship().equals(">") && !(v.getValue() > c.getValue())){
		        		list.add(v);
		        	}
		        	if(c.getRelationship().equals(">=") && !(v.getValue() >= c.getValue())){
		        		list.add(v);
		        	}
		        	if(c.getRelationship().equals("<") && !(v.getValue() < c.getValue())){
		        		list.add(v);
		        	}
		        	if(c.getRelationship().equals("<=") && !(v.getValue() <= c.getValue())){
		        		list.add(v);
		        	}
		        ),
		        result(list)
		    );
	then	
		Instruction instruction= new Instruction();
		instruction.setRuleName(Clue.SINGLE_DOMAIN_REDUCTION_RULE_NAME);
		instruction.setRuleDescription(Clue.SINGLE_DOMAIN_REDUCTION_RULE_DESC);
		for(int i=0; i< $values.size();i++){
			Variable v = (Variable) $values.get(i);
			retract(v);
			instruction.addAction(v+ " removed due to: " +  c);
		}
		s.addInstruction(instruction);
end

rule "InValuesClueDomainReduction"
	salience 500
	when
		s: Solution(found==false)
		c: InValuesClue(notIn==false)
		v: Variable(name==c.dstVar, c.getValues() not contains value)
	then	
		Instruction i= new Instruction();
		i.setRuleName(Clue.INVALUES_CLUE_DOMAIN_REDUCTION_RULE_NAME);
		i.setRuleDescription(Clue.INVALUES_CLUE_DOMAIN_REDUCTION_RULE_DESC);
		i.addAction(v +" removed due to " + c);
		s.addInstruction(i);
		retract(v);
end

rule "NotInValuesClueDomainReduction"
	salience 500
	when
		s: Solution(found==false)
		c: InValuesClue(notIn==true)
		v: Variable(name==c.dstVar, c.getValues() contains value)
	then	
		Instruction i= new Instruction();
		i.setRuleName(Clue.NOT_IN_VALUES_CLUE_DOMAIN_REDUCTION_RULE_NAME);
		i.setRuleDescription(Clue.NOT_IN_VALUES_CLUE_DOMAIN_REDUCTION_RULE_DESC);
		i.addAction(v +" removed due to " + c);
		s.addInstruction(i);
		retract(v);
end

rule "Process TwoVarsRelationshipClue"
	salience 450
	when
		s: Solution(found==false)
		c: TwoVarsRelationshipClue($dv: dstVar, $rel: relationship,  $sv: srcVar, $operator: operator)		
		$assignments: HashMap(size>=1)
		    from accumulate( dv: Variable(name== $dv) and sv: Variable(name== $sv),
		        init( HashMap h = new HashMap();),
		        action(
		        	boolean sw=false;
		        	if($rel.equals("=")){
			        	if($operator.equals("+") && dv.getValue()== sv.getValue() + c.getValue())
				        	sw=true;
			        	if($operator.equals("-") && dv.getValue()== sv.getValue() - c.getValue())
				        	sw=true;
				        if($operator.equals("*") && dv.getValue()== sv.getValue() * c.getValue())
				        	sw=true;
				        if($operator.equals("/") && dv.getValue()== sv.getValue() / c.getValue())
				        	sw=true;
		        	}else if($rel.equals(">")){
		        		if($operator.equals("+") && dv.getValue()> sv.getValue() + c.getValue())
				        	sw=true;
			        	if($operator.equals("-") && dv.getValue()> sv.getValue() - c.getValue())
				        	sw=true;
				        if($operator.equals("*") && dv.getValue()> sv.getValue() * c.getValue())
				        	sw=true;
				        if($operator.equals("/") && dv.getValue()> sv.getValue() * c.getValue())
				        	sw=true;
		        	}else if($rel.equals("<")){
		        		if($operator.equals("+") && dv.getValue()< sv.getValue() + c.getValue())
				        	sw=true;
			        	if($operator.equals("-") && dv.getValue()< sv.getValue() - c.getValue())
				        	sw=true;
				        if($operator.equals("*") && dv.getValue()< sv.getValue() * c.getValue())
				        	sw=true;
				        if($operator.equals("/") && dv.getValue()< sv.getValue() / c.getValue())
				        	sw=true;
		        	}else if($rel.equals(">=")){
		        		if($operator.equals("+") && dv.getValue()>= sv.getValue() + sv.getValue())
				        	sw=true;
			        	if($operator.equals("-") && dv.getValue()>= sv.getValue() - sv.getValue())
				        	sw=true;
				        if($operator.equals("*") && dv.getValue()>= sv.getValue() * sv.getValue())
				        	sw=true;
				        if($operator.equals("/") && dv.getValue()>= sv.getValue() / sv.getValue())
				        	sw=true;
		        	}else if($rel.equals("<=")){
		        		if($operator.equals("+") && dv.getValue()<= sv.getValue() + c.getValue())
				        	sw=true;
			        	if($operator.equals("-") && dv.getValue()<= sv.getValue() - c.getValue())
				        	sw=true;
				        if($operator.equals("*") && dv.getValue()<= sv.getValue() * c.getValue())
				        	sw=true;
				        if($operator.equals("/") && dv.getValue()<= sv.getValue() / c.getValue())
				        	sw=true;
		        	}
		        	if(sw){
		        		if(h.get(dv)==null)
		        			h.put(dv, new ArrayList<Variable>());
		        		ArrayList<Variable> sources= (ArrayList<Variable>)h.get(dv);
		        		sources.add(sv);
		        	}
		        ),
		        result(h)
		    );
	then
		Instruction instruction= new Instruction();
		instruction.setRuleName(Clue.TWO_VARS_RELATIONSHIP_CLUE_RULE_NAME);
		instruction.setRuleDescription(Clue.TWO_VARS_RELATIONSHIP_CLUE_RULE_DESC);
		s.addInstruction(instruction);
		
		
		if(!$rel.equals("=")&& c.getValue()==0 || ($rel.equals("=") && c.getValue()!=0)){
			AllDiffClue clue= new AllDiffClue();
			clue.addVariable($dv);
			clue.addVariable($sv);
			instruction.addAction("Added: " + clue.toString()+ " due to: "+c);
			insert(clue);
		}else if($rel.equals("=")&& c.getValue()==0){
			AllDiffClue clue01= new AllDiffClue();
			clue01.addVariable($dv);
			String group01="";
			switch($dv.charAt(0)){
				case 'A':
					group01="B";
				break;
				case 'B':
					group01="A";
				break;
			};
			for(int i=1;i<=4;i++){
				if(!$sv.equals(group01+i))
					clue01.addVariable(group01+i);
			}   
			instruction.addAction("Added: " + clue01+ " due to: "+c);
			insert(clue01);
			
			AllDiffClue clue02= new AllDiffClue();
			clue02.addVariable($sv);
			String group02="";
			switch($sv.charAt(0)){
				case 'A':
					group02="B";
				break;
				case 'B':
					group02="A";
				break;
			};
			for(int i=1;i<=4;i++){
				if(!$dv.equals(group02+i))
					clue02.addVariable(group02+i);
			}   
			instruction.addAction("Added: " + clue02+ " due to: "+c);
			insert(clue02);
		}
		if($assignments.size()==1){
			Variable dest= (Variable)$assignments.keySet().iterator().next();
			SingleClue sc1= new SingleClue();
			sc1.setDstVar(dest.getName());
			sc1.setRelationship(InputPattern.EQUIVALENCE_RELATIONSHIP);
			sc1.setValue(dest.getValue());
			insert(sc1);
			instruction.addAction("Added: " + sc1+ " due to: " + c + " is solved only: " + $assignments);
			
			ArrayList<Variable> sources= (ArrayList<Variable>)$assignments.get(dest);
			if(sources.size()==1){
				SingleClue sc2= new SingleClue();
				sc2.setDstVar(sources.get(0).getName());
				sc2.setRelationship(InputPattern.EQUIVALENCE_RELATIONSHIP);
				sc2.setValue(sources.get(0).getValue());
				insert(sc2);
				instruction.addAction("Added: " + sc2+ " due to: " + c + " is solved only: " + $assignments);
			}else if(sources.size()>1){
				InValuesClue ivc= new InValuesClue();
				for (int i=0;i< sources.size();i++){
					Variable v= sources.get(i);
					ivc.setDstVar(v.getName());
					ivc.addValue(Integer.valueOf(v.getValue()));
				}
				if(ivc.getValues().size()>0){
					insert(ivc);
					instruction.addAction("Added: " + ivc+ " due to: " + c + " domain's solution is : " + $assignments);
				}
			}
		}else{
			InValuesClue ivc1= new InValuesClue();
			ivc1.setDstVar($dv);
			InValuesClue ivc2= new InValuesClue();
			ivc2.setDstVar($sv);
			Iterator iterator= $assignments.keySet().iterator();
			while (iterator.hasNext()){
			 	Variable d= (Variable)iterator.next();
			 	ivc1.addValue(Integer.valueOf(d.getValue()));
			 	
			 	ArrayList<Variable> sources= (ArrayList<Variable>)$assignments.get(d);
			 	for (int i=0;i< sources.size();i++){
					Variable v= sources.get(i);
					ivc2.addValue(Integer.valueOf(v.getValue()));
				}
			 	
			}
			if(ivc1.getValues().size()>0){
				insert(ivc1);
				instruction.addAction("Added: " + ivc1+ " due to: " + c + " domain's solution is : " + $assignments);
			}
				
			if(ivc2.getValues().size()>0){
				insert(ivc2);
				instruction.addAction("Added: " + ivc2+ " due to: " + c + " domain's solution is : " + $assignments);	
			}
		}
end


rule "1VarDiff3VarsInADiffGroup01"
	no-loop true
	salience 450
	when
		s: Solution(found==false)
		v: String() from ["A1","A2","A3","A4"]
		v1: String() from ["B1","B2","B3","B4"]
		exists AllDiffClue(variables contains v, variables contains v1)
		v2: String(this!=v1) from ["B1","B2","B3","B4"]
		exists AllDiffClue(variables contains v, variables contains v2)
		v3: String(this!=v1, this!=v2) from ["B1","B2","B3","B4"]
		exists AllDiffClue(variables contains v, variables contains v3)
		v4: String(this!=v1, this!=v2, this!=v3) from ["B1","B2","B3","B4"]
	then
		Instruction instruction= new Instruction();
		instruction.setRuleName(Clue.ONEVAR_DIFF_3VARS_IN_A_DIFF_GROUP_01_RULE_NAME);
		instruction.setRuleDescription(Clue.ONEVAR_DIFF_3VARS_IN_A_DIFF_GROUP_01_RULE_DESC);
		s.addInstruction(instruction);
		
		TwoVarsRelationshipClue clue= new TwoVarsRelationshipClue();
		clue.setDstVar(v);
		clue.setRelationship(InputPattern.EQUIVALENCE_RELATIONSHIP);
		clue.setSrcVar(v4);
		clue.setOperator("+");
		clue.setValue(0);
		insert(clue);
		String explanation= v+ " is different from: "+ v1+ ", "+ v2+ ", "+ v3; 
		instruction.addAction("Added: " + clue+ " due to: " + explanation);
end

rule "1VarDiff3VarsInADiffGroup02"
	no-loop true
	salience 450
	when
		s: Solution(found==false)
		v: String() from ["B1","B2","B3","B4"]
		v1: String() from ["A1","A2","A3","A4"]
		exists AllDiffClue(variables contains v, variables contains v1)
		v2: String(this!=v1) from ["A1","A2","A3","A4"]
		exists AllDiffClue(variables contains v, variables contains v2)
		v3: String(this!=v1, this!=v2) from ["A1","A2","A3","A4"]
		exists AllDiffClue(variables contains v, variables contains v3)
		v4: String(this!=v1, this!=v2, this!=v3) from ["A1","A2","A3","A4"]
	then
		Instruction instruction= new Instruction();
		instruction.setRuleName(Clue.ONEVAR_DIFF_3VARS_IN_A_DIFF_GROUP_02_RULE_NAME);
		instruction.setRuleDescription(Clue.ONEVAR_DIFF_3VARS_IN_A_DIFF_GROUP_02_RULE_DESC);
		s.addInstruction(instruction);
		TwoVarsRelationshipClue clue= new TwoVarsRelationshipClue();
		clue.setDstVar(v);
		clue.setRelationship(InputPattern.EQUIVALENCE_RELATIONSHIP);
		clue.setSrcVar(v4);
		clue.setOperator("+");
		clue.setValue(0);
		insert(clue);
		String explanation= v+ " is different from: "+ v1+ ", "+ v2+ ", "+ v3; 
		instruction.addAction("Added: " + clue+ " due to: " + explanation);
end

rule "3Vars2Clues01"
	salience 400
	no-loop true
	when
		s: Solution(found==false)
		c1: TwoVarsRelationshipClue($v2: dstVar, relationship == "=",  $v1: srcVar, $op01: operator)
		c2: TwoVarsRelationshipClue($v3: dstVar , relationship == "=",  $v2== srcVar, $op02: operator)
		$assignments: HashMap(size>=1)
		    from accumulate(v1: Variable(name == $v1) and v2: Variable(name==$v2) and v3: Variable(name==$v3),
		        init( HashMap h = new HashMap();),
		        action(
		        	String key = ""+v1.getValue()+"::"+v2.getValue()+"::"+v3.getValue();
			        boolean sw=false;
			        sw=  ($op01.equals("+") && $op02.equals("+") && v2.getValue()== v1.getValue() + c1.getValue() && v3.getValue()== v2.getValue() + c2.getValue() );
			        sw|= ($op01.equals("+") && $op02.equals("-") && v2.getValue()== v1.getValue() + c1.getValue() && v3.getValue()== v2.getValue() - c2.getValue());
			        sw|= ($op01.equals("+") && $op02.equals("*") && v2.getValue()== v1.getValue() + c1.getValue() && v3.getValue()== v2.getValue() * c2.getValue());
			        sw|= ($op01.equals("+") && $op02.equals("/") && v2.getValue()== v1.getValue() + c1.getValue() && v3.getValue()== v2.getValue() / c2.getValue());
			        
			        sw|= ($op01.equals("-") && $op02.equals("+") && v2.getValue()== v1.getValue() - c1.getValue() && v3.getValue()== v2.getValue() + c2.getValue());
			        sw|= ($op01.equals("-") && $op02.equals("-") && v2.getValue()== v1.getValue() - c1.getValue() && v3.getValue()== v2.getValue() - c2.getValue());
			        sw|= ($op01.equals("-") && $op02.equals("*") && v2.getValue()== v1.getValue() - c1.getValue() && v3.getValue()== v2.getValue() * c2.getValue());
			        sw|= ($op01.equals("-") && $op02.equals("/") && v2.getValue()== v1.getValue() - c1.getValue() && v3.getValue()== v2.getValue() / c2.getValue());
			        
			        sw|= ($op01.equals("*") && $op02.equals("+") && v2.getValue()== v1.getValue() * c1.getValue() && v3.getValue()== v2.getValue() + c2.getValue());
			        sw|= ($op01.equals("*") && $op02.equals("-") && v2.getValue()== v1.getValue() * c1.getValue() && v3.getValue()== v2.getValue() - c2.getValue());
			        sw|= ($op01.equals("*") && $op02.equals("*") && v2.getValue()== v1.getValue() * c1.getValue() && v3.getValue()== v2.getValue() * c2.getValue());
			        sw|= ($op01.equals("*") && $op02.equals("/") && v2.getValue()== v1.getValue() * c1.getValue() && v3.getValue()== v2.getValue() / c2.getValue());
			        
			        sw|= ($op01.equals("/") && $op02.equals("+") && v2.getValue()== v1.getValue() / c1.getValue() && v3.getValue()== v2.getValue() + c2.getValue());
			        sw|= ($op01.equals("/") && $op02.equals("-") && v2.getValue()== v1.getValue() / c1.getValue() && v3.getValue()== v2.getValue() - c2.getValue());
			        sw|= ($op01.equals("/") && $op02.equals("*") && v2.getValue()== v1.getValue() / c1.getValue() && v3.getValue()== v2.getValue() * c2.getValue());
			        sw|= ($op01.equals("/") && $op02.equals("/") && v2.getValue()== v1.getValue() / c1.getValue() && v3.getValue()== v2.getValue() / c2.getValue());
			        if(h.get(key)==null && sw){
			        	ArrayList<Variable> vars =new ArrayList();
		        		vars.add(v1);
		        		vars.add(v2);
		        		vars.add(v3);
		        		h.put(key, vars);
			        }
		        ),
		        result(h)
		    );
	then
		Instruction instruction= new Instruction();
		instruction.setRuleName(Clue.THREE_VARS_TWO_CLUES_01_RULE_NAME);
		instruction.setRuleDescription(Clue.THREE_VARS_TWO_CLUES_01_RULE_DESC);
		s.addInstruction(instruction);
		ArrayList<ArrayList<Variable>> combinations= new ArrayList($assignments.values());
		System.out.println(combinations);
		if(combinations.size()==1){
			ArrayList<Variable> vars= (ArrayList<Variable>)combinations.get(0);
			for(int i=0; i<vars.size(); i++){
				Variable v= vars.get(i);
				SingleClue sc= new SingleClue();
				sc.setDstVar(v.getName());
				sc.setRelationship(InputPattern.EQUIVALENCE_RELATIONSHIP);
				sc.setValue(v.getValue());
				insert(sc);
				String explanation= "{"+ c1 + ", "+ c2+" } system has unique solution: "+ vars;
				instruction.addAction("Added: " + sc+ " due to: " + explanation);
			}
		}else if(combinations.size()>1){
			InValuesClue ivc1= new InValuesClue();
			ivc1.setDstVar($v1);
			InValuesClue ivc2= new InValuesClue();
			ivc2.setDstVar($v2);
			InValuesClue ivc3= new InValuesClue();
			ivc3.setDstVar($v3);
			
			for(int i=0; i<combinations.size() ;i++){
				ArrayList<Variable> combination = combinations.get(i);
				for(int j=0; j< combination.size();j++){
					Variable v = combination.get(j);
					if(ivc1.getDstVar().equals(v.getName())){
						ivc1.addValue(Integer.valueOf(v.getValue()));
					}else if(ivc2.getDstVar().equals(v.getName())){
						ivc2.addValue(Integer.valueOf(v.getValue()));
					}else if(ivc3.getDstVar().equals(v.getName())){
						ivc3.addValue(Integer.valueOf(v.getValue()));
					}
				}
			}
			if(ivc1.getValues().size()>0){
				insert(ivc1);
				String explanation= "{"+ c1 + ", "+ c2+" } system has solutions: "+ combinations;
				instruction.addAction("Added: " + ivc1+ " due to: " + explanation);
			}
				
			if(ivc2.getValues().size()>0){
				insert(ivc2);
				String explanation= "{"+ c1 + ", "+ c2+" } system has solutions: "+ combinations;
				instruction.addAction("Added: " + ivc2+ " due to: " + explanation);
			}
				
			if(ivc3.getValues().size()>0){
				insert(ivc3);
				String explanation= "{"+ c1 + ", "+ c2+" } system has solutions: "+ combinations;
				instruction.addAction("Added: " + ivc3+ " due to: " + explanation);
			}	
		}
end


rule "3Vars2Clues02"
	salience 400
	no-loop true
	when
		s: Solution(found==false)
		c1: TwoVarsRelationshipClue($v2: dstVar, relationship == "=",  $v1: srcVar, $op01: operator)
		c2: TwoVarsRelationshipClue(this!= c1, $v3: dstVar , relationship == "=",  $v1== srcVar, $op02: operator)
		$assignments: HashMap(size>=1)
		    from accumulate(v1: Variable(name == $v1) and v2: Variable(name==$v2) and v3: Variable(name==$v3),
		        init( HashMap h = new HashMap();),
		        action(
		        	String key = ""+v1.getValue()+"::"+v2.getValue()+"::"+v3.getValue();
			        boolean sw=false;
			        sw=  ($op01.equals("+") && $op02.equals("+") && v2.getValue()== v1.getValue() + c1.getValue() && v3.getValue()== v1.getValue() + c2.getValue());
			        sw|= ($op01.equals("+") && $op02.equals("-") && v2.getValue()== v1.getValue() + c1.getValue() && v3.getValue()== v1.getValue() - c2.getValue());
			        sw|= ($op01.equals("+") && $op02.equals("*") && v2.getValue()== v1.getValue() + c1.getValue() && v3.getValue()== v1.getValue() * c2.getValue());
			        sw|= ($op01.equals("+") && $op02.equals("/") && v2.getValue()== v1.getValue() + c1.getValue() && v3.getValue()== v1.getValue() / c2.getValue());
			        
			        sw|= ($op01.equals("-") && $op02.equals("+") && v2.getValue()== v1.getValue() - c1.getValue() && v3.getValue()== v1.getValue() + c2.getValue());
			        sw|= ($op01.equals("-") && $op02.equals("-") && v2.getValue()== v1.getValue() - c1.getValue() && v3.getValue()== v1.getValue() - c2.getValue());
			        sw|= ($op01.equals("-") && $op02.equals("*") && v2.getValue()== v1.getValue() - c1.getValue() && v3.getValue()== v1.getValue() * c2.getValue());
			        sw|= ($op01.equals("-") && $op02.equals("/") && v2.getValue()== v1.getValue() - c1.getValue() && v3.getValue()== v1.getValue() / c2.getValue());
			        
			        sw|= ($op01.equals("*") && $op02.equals("+") && v2.getValue()== v1.getValue() * c1.getValue() && v3.getValue()== v1.getValue() + c2.getValue());
			        sw|= ($op01.equals("*") && $op02.equals("-") && v2.getValue()== v1.getValue() * c1.getValue() && v3.getValue()== v1.getValue() - c2.getValue());
			        sw|= ($op01.equals("*") && $op02.equals("*") && v2.getValue()== v1.getValue() * c1.getValue() && v3.getValue()== v1.getValue() * c2.getValue());
			        sw|= ($op01.equals("*") && $op02.equals("/") && v2.getValue()== v1.getValue() * c1.getValue() && v3.getValue()== v1.getValue() / c2.getValue());
			        
			        sw|= ($op01.equals("/") && $op02.equals("+") && v2.getValue()== v1.getValue() / c1.getValue() && v3.getValue()== v1.getValue() + c2.getValue());
			        sw|= ($op01.equals("/") && $op02.equals("-") && v2.getValue()== v1.getValue() / c1.getValue() && v3.getValue()== v1.getValue() - c2.getValue());
			        sw|= ($op01.equals("/") && $op02.equals("*") && v2.getValue()== v1.getValue() / c1.getValue() && v3.getValue()== v1.getValue() * c2.getValue());
			        sw|= ($op01.equals("/") && $op02.equals("/") && v2.getValue()== v1.getValue() / c1.getValue() && v3.getValue()== v1.getValue() / c2.getValue());
			        if(h.get(key)==null && sw){
			        	ArrayList<Variable> vars =new ArrayList();
		        		vars.add(v1);
		        		vars.add(v2);
		        		vars.add(v3);
		        		h.put(key, vars);
			        }
		        ),
		        result(h)
		    );
	then
		Instruction instruction= new Instruction();
		instruction.setRuleName(Clue.THREE_VARS_TWO_CLUES_02_RULE_NAME);
		instruction.setRuleDescription(Clue.THREE_VARS_TWO_CLUES_02_RULE_DESC);
		s.addInstruction(instruction);
		ArrayList<ArrayList<Variable>> combinations= new ArrayList($assignments.values());
		System.out.println(combinations);
		if(combinations.size()==1){
			ArrayList<Variable> vars= (ArrayList<Variable>)combinations.get(0);
			for(int i=0; i<vars.size(); i++){
				Variable v= vars.get(i);
				SingleClue sc= new SingleClue();
				sc.setDstVar(v.getName());
				sc.setRelationship(InputPattern.EQUIVALENCE_RELATIONSHIP);
				sc.setValue(v.getValue());
				insert(sc);
				String explanation= "{"+ c1 + ", "+ c2+" } system has unique solution: "+ vars;
				instruction.addAction("Added: " + sc+ " due to: " + explanation);
			}
		}else if(combinations.size()>1){
			InValuesClue ivc1= new InValuesClue();
			ivc1.setDstVar($v1);
			InValuesClue ivc2= new InValuesClue();
			ivc2.setDstVar($v2);
			InValuesClue ivc3= new InValuesClue();
			ivc3.setDstVar($v3);
			
			for(int i=0; i<combinations.size() ;i++){
				ArrayList<Variable> combination = combinations.get(i);
				for(int j=0; j< combination.size();j++){
					Variable v = combination.get(j);
					if(ivc1.getDstVar().equals(v.getName())){
						ivc1.addValue(Integer.valueOf(v.getValue()));
					}else if(ivc2.getDstVar().equals(v.getName())){
						ivc2.addValue(Integer.valueOf(v.getValue()));
					}else if(ivc3.getDstVar().equals(v.getName())){
						ivc3.addValue(Integer.valueOf(v.getValue()));
					}
				}
			}
			
			if(ivc1.getValues().size()>0){
				insert(ivc1);
				String explanation= "{"+ c1 + ", "+ c2+" } system has solutions: "+ combinations;
				instruction.addAction("Added: " + ivc1+ " due to: " + explanation);
			}
				
			if(ivc2.getValues().size()>0){
				insert(ivc2);
				String explanation= "{"+ c1 + ", "+ c2+" } system has solutions: "+ combinations;
				instruction.addAction("Added: " + ivc2+ " due to: " + explanation);
			}
				
			if(ivc3.getValues().size()>0){
				insert(ivc3);
				String explanation= "{"+ c1 + ", "+ c2+" } system has solutions: "+ combinations;
				instruction.addAction("Added: " + ivc3+ " due to: " + explanation);
			}	
		}
end


rule "3Vars2Clues03"
	salience 400
	no-loop true
	when
		s: Solution(found==false)
		c1: TwoVarsRelationshipClue($v2: dstVar, relationship == "=",  $v1: srcVar, $op01: operator)
		c2: TwoVarsRelationshipClue(this!= c1, $v2== dstVar, relationship == "=", $v3: srcVar , $op02: operator)
		$assignments: HashMap(size>=1)
		    from accumulate(v1: Variable(name == $v1) and v2: Variable(name==$v2) and v3: Variable(name==$v3),
		        init( HashMap h = new HashMap();),
		        action(
		        	String key = ""+v1.getValue()+"::"+v2.getValue()+"::"+v3.getValue();
			        boolean sw=false;
			        sw=  ($op01.equals("+") && $op02.equals("+") && v2.getValue()== v1.getValue() + c1.getValue() && v2.getValue()== v3.getValue() + c2.getValue());
			        sw|= ($op01.equals("+") && $op02.equals("-") && v2.getValue()== v1.getValue() + c1.getValue() && v2.getValue()== v3.getValue() - c2.getValue());
			        sw|= ($op01.equals("+") && $op02.equals("*") && v2.getValue()== v1.getValue() + c1.getValue() && v2.getValue()== v3.getValue() * c2.getValue());
			        sw|= ($op01.equals("+") && $op02.equals("/") && v2.getValue()== v1.getValue() + c1.getValue() && v2.getValue()== v3.getValue() / c2.getValue());
			        
			        sw|= ($op01.equals("-") && $op02.equals("+") && v2.getValue()== v1.getValue() - c1.getValue() && v2.getValue()== v3.getValue() + c2.getValue());
			        sw|= ($op01.equals("-") && $op02.equals("-") && v2.getValue()== v1.getValue() - c1.getValue() && v2.getValue()== v3.getValue() - c2.getValue());
			        sw|= ($op01.equals("-") && $op02.equals("*") && v2.getValue()== v1.getValue() - c1.getValue() && v2.getValue()== v3.getValue() * c2.getValue());
			        sw|= ($op01.equals("-") && $op02.equals("/") && v2.getValue()== v1.getValue() - c1.getValue() && v2.getValue()== v3.getValue() / c2.getValue());
			        
			        sw|= ($op01.equals("*") && $op02.equals("+") && v2.getValue()== v1.getValue() * c1.getValue() && v2.getValue()== v3.getValue() + c2.getValue());
			        sw|= ($op01.equals("*") && $op02.equals("-") && v2.getValue()== v1.getValue() * c1.getValue() && v2.getValue()== v3.getValue() - c2.getValue());
			        sw|= ($op01.equals("*") && $op02.equals("*") && v2.getValue()== v1.getValue() * c1.getValue() && v2.getValue()== v3.getValue() * c2.getValue());
			        sw|= ($op01.equals("*") && $op02.equals("/") && v2.getValue()== v1.getValue() * c1.getValue() && v2.getValue()== v3.getValue() / c2.getValue());
			        
			        sw|= ($op01.equals("/") && $op02.equals("+") && v2.getValue()== v1.getValue() / c1.getValue() && v2.getValue()== v3.getValue() + c2.getValue());
			        sw|= ($op01.equals("/") && $op02.equals("-") && v2.getValue()== v1.getValue() / c1.getValue() && v2.getValue()== v3.getValue() - c2.getValue());
			        sw|= ($op01.equals("/") && $op02.equals("*") && v2.getValue()== v1.getValue() / c1.getValue() && v2.getValue()== v3.getValue() * c2.getValue());
			        sw|= ($op01.equals("/") && $op02.equals("/") && v2.getValue()== v1.getValue() / c1.getValue() && v2.getValue()== v3.getValue() / c2.getValue());
			        if(h.get(key)==null && sw){
			        	ArrayList<Variable> vars =new ArrayList();
		        		vars.add(v1);
		        		vars.add(v2);
		        		vars.add(v3);
		        		h.put(key, vars);
			        }
		        ),
		        result(h)
		    );
	then
		Instruction instruction= new Instruction();
		instruction.setRuleName(Clue.THREE_VARS_TWO_CLUES_03_RULE_NAME);
		instruction.setRuleDescription(Clue.THREE_VARS_TWO_CLUES_03_RULE_DESC);
		s.addInstruction(instruction);
		ArrayList<ArrayList<Variable>> combinations= new ArrayList($assignments.values());
		System.out.println(combinations);
		if(combinations.size()==1){
			ArrayList<Variable> vars= (ArrayList<Variable>)combinations.get(0);
			for(int i=0; i<vars.size(); i++){
				Variable v= vars.get(i);
				SingleClue sc= new SingleClue();
				sc.setDstVar(v.getName());
				sc.setRelationship(InputPattern.EQUIVALENCE_RELATIONSHIP);
				sc.setValue(v.getValue());
				insert(sc);
				String explanation= "{"+ c1 + ", "+ c2+" } system has unique solution: "+ vars;
				instruction.addAction("Added: " + sc+ " due to: " + explanation);
			}
		}else if(combinations.size()>1){
			InValuesClue ivc1= new InValuesClue();
			ivc1.setDstVar($v1);
			InValuesClue ivc2= new InValuesClue();
			ivc2.setDstVar($v2);
			InValuesClue ivc3= new InValuesClue();
			ivc3.setDstVar($v3);
			
			for(int i=0; i<combinations.size() ;i++){
				ArrayList<Variable> combination = combinations.get(i);
				for(int j=0; j< combination.size();j++){
					Variable v = combination.get(j);
					if(ivc1.getDstVar().equals(v.getName())){
						ivc1.addValue(Integer.valueOf(v.getValue()));
					}else if(ivc2.getDstVar().equals(v.getName())){
						ivc2.addValue(Integer.valueOf(v.getValue()));
					}else if(ivc3.getDstVar().equals(v.getName())){
						ivc3.addValue(Integer.valueOf(v.getValue()));
					}
				}
			}
			
			if(ivc1.getValues().size()>0){
				insert(ivc1);
				String explanation= "{"+ c1 + ", "+ c2+" } system has solutions: "+ combinations;
				instruction.addAction("Added: " + ivc1+ " due to: " + explanation);
			}
				
			if(ivc2.getValues().size()>0){
				insert(ivc2);
				String explanation= "{"+ c1 + ", "+ c2+" } system has solutions: "+ combinations;
				instruction.addAction("Added: " + ivc2+ " due to: " + explanation);
			}
				
			if(ivc3.getValues().size()>0){
				insert(ivc3);
				String explanation= "{"+ c1 + ", "+ c2+" } system has solutions: "+ combinations;
				instruction.addAction("Added: " + ivc3+ " due to: " + explanation);
			}		
		}
end


rule "CustomXORClueRule"
	salience 400
	when
		s: Solution(found==false)
		c: XORClue(c1.getValue() == c2.getValue(), c1.getClass()== SingleClue, c2.getClass()== SingleClue, v1: c1.getDstVar(), v2: c2.getDstVar())
	then
		AllDiffClue clue= new AllDiffClue();
		clue.addVariable(v1);
		clue.addVariable(v2);
		insert(clue);
		Instruction instruction= new Instruction();
		instruction.setRuleName(Clue.CUSTOM_XOR_CLUE_RULE_NAME);
		instruction.setRuleDescription(Clue.CUSTOM_XOR_CLUE_RULE_DESC);
		instruction.addAction("Added: " + clue + " due to: "+ c);
		s.addInstruction(instruction);
end

rule "XORClueRule01"
	salience 400
	when
		s: Solution(found==false)
		c: XORClue(c1.getValue() == c2.getValue(), c1.getClass()== SingleClue, c2.getClass()== SingleClue, v1: c1.getDstVar(), v2: c2.getDstVar())
		not Variable(name== c.getC1().getDstVar(), value==c.getC1().getValue())
	then
		insert(c.getC2());
		Instruction instruction= new Instruction();
		instruction.setRuleName(Clue.XOR_CLUE_01_RULE_NAME);
		instruction.setRuleDescription(Clue.XOR_CLUE_01_RULE_DESC);
		instruction.addAction("Added: " + c.getC2() + " due to: not("+ c.getC1()+ ")");
		s.addInstruction(instruction);
end

rule "XORClueRule02"
	salience 400
	when
		s: Solution(found==false)
		c: XORClue(c1.getValue() == c2.getValue(), c1.getClass()== SingleClue, c2.getClass()== SingleClue, v1: c1.getDstVar(), v2: c2.getDstVar())
		not Variable(name== c.getC2().getDstVar(), value==c.getC2().getValue())
	then
		insert(c.getC1());
		Instruction instruction= new Instruction();
		instruction.setRuleName(Clue.XOR_CLUE_02_RULE_NAME);
		instruction.setRuleDescription(Clue.XOR_CLUE_01_RULE_DESC);
		instruction.addAction("Added: " + c.getC1() + " due to: not("+ c.getC2()+ ")");
		s.addInstruction(instruction);
end


rule "OnlyOneValueInAVarGroup"
	salience 400
	when
		s: Solution(found==false)
		g: String() from ["A","B"]
		$values: HashMap(size>=1)
		    from accumulate(v: Variable(group==g),
		        init( HashMap h = new HashMap();),
		        action(
		        	Integer key= Integer.valueOf(v.getValue());
		        	if(h.get(key)==null)
		        		h.put(key, new ArrayList<Variable>());
		        	ArrayList<Variable> vars=(ArrayList<Variable>)h.get(key);
		        	vars.add(v);
		        ),
		        result(h)
		    );
		$varList: ArrayList(size==1) from $values.values()
	then
		Variable v=(Variable)$varList.get(0);
		System.out.println(v);
		SingleClue sc= new SingleClue();
		sc.setDstVar(v.getName());
		sc.setRelationship(InputPattern.EQUIVALENCE_RELATIONSHIP);
		sc.setValue(v.getValue());
		insert(sc);
		Instruction instruction= new Instruction();
		instruction.setRuleName(Clue.ONLY_ONE_VALUE_IN_A_VAR_DIMENSION_RULE_NAME);
		instruction.setRuleDescription(Clue.ONLY_ONE_VALUE_IN_A_VAR_DIMENSION_RULE_DESC);
		instruction.addAction("Added: "+ sc + " due to: OnlyOneValueInAVarDimension: " + v);
		s.addInstruction(instruction);
end